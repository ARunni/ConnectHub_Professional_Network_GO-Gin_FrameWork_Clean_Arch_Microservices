// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/pb/auth/jobseeker/jobseeker.proto

package jobseeker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobSeeker_JobSeekerSignup_FullMethodName = "/jobseekerauth.JobSeeker/JobSeekerSignup"
	JobSeeker_JobSeekerLogin_FullMethodName  = "/jobseekerauth.JobSeeker/JobSeekerLogin"
)

// JobSeekerClient is the client API for JobSeeker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobSeekerClient interface {
	JobSeekerSignup(ctx context.Context, in *JobSeekerSignupRequest, opts ...grpc.CallOption) (*JobSeekerSignupResponse, error)
	JobSeekerLogin(ctx context.Context, in *JobSeekerLoginRequest, opts ...grpc.CallOption) (*JobSeekerLoginResponse, error)
}

type jobSeekerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobSeekerClient(cc grpc.ClientConnInterface) JobSeekerClient {
	return &jobSeekerClient{cc}
}

func (c *jobSeekerClient) JobSeekerSignup(ctx context.Context, in *JobSeekerSignupRequest, opts ...grpc.CallOption) (*JobSeekerSignupResponse, error) {
	out := new(JobSeekerSignupResponse)
	err := c.cc.Invoke(ctx, JobSeeker_JobSeekerSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSeekerClient) JobSeekerLogin(ctx context.Context, in *JobSeekerLoginRequest, opts ...grpc.CallOption) (*JobSeekerLoginResponse, error) {
	out := new(JobSeekerLoginResponse)
	err := c.cc.Invoke(ctx, JobSeeker_JobSeekerLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobSeekerServer is the server API for JobSeeker service.
// All implementations must embed UnimplementedJobSeekerServer
// for forward compatibility
type JobSeekerServer interface {
	JobSeekerSignup(context.Context, *JobSeekerSignupRequest) (*JobSeekerSignupResponse, error)
	JobSeekerLogin(context.Context, *JobSeekerLoginRequest) (*JobSeekerLoginResponse, error)
	mustEmbedUnimplementedJobSeekerServer()
}

// UnimplementedJobSeekerServer must be embedded to have forward compatible implementations.
type UnimplementedJobSeekerServer struct {
}

func (UnimplementedJobSeekerServer) JobSeekerSignup(context.Context, *JobSeekerSignupRequest) (*JobSeekerSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobSeekerSignup not implemented")
}
func (UnimplementedJobSeekerServer) JobSeekerLogin(context.Context, *JobSeekerLoginRequest) (*JobSeekerLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobSeekerLogin not implemented")
}
func (UnimplementedJobSeekerServer) mustEmbedUnimplementedJobSeekerServer() {}

// UnsafeJobSeekerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobSeekerServer will
// result in compilation errors.
type UnsafeJobSeekerServer interface {
	mustEmbedUnimplementedJobSeekerServer()
}

func RegisterJobSeekerServer(s grpc.ServiceRegistrar, srv JobSeekerServer) {
	s.RegisterService(&JobSeeker_ServiceDesc, srv)
}

func _JobSeeker_JobSeekerSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSeekerSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSeekerServer).JobSeekerSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSeeker_JobSeekerSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSeekerServer).JobSeekerSignup(ctx, req.(*JobSeekerSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSeeker_JobSeekerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSeekerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSeekerServer).JobSeekerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSeeker_JobSeekerLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSeekerServer).JobSeekerLogin(ctx, req.(*JobSeekerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobSeeker_ServiceDesc is the grpc.ServiceDesc for JobSeeker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobSeeker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobseekerauth.JobSeeker",
	HandlerType: (*JobSeekerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobSeekerSignup",
			Handler:    _JobSeeker_JobSeekerSignup_Handler,
		},
		{
			MethodName: "JobSeekerLogin",
			Handler:    _JobSeeker_JobSeekerLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/auth/jobseeker/jobseeker.proto",
}
